{"version":3,"sources":["components/ButtonAppBar.jsx","store/city/types.js","components/LabeledCheckbox.jsx","store/city/actions.js","components/CityCard.jsx","store/weather/types.js","store/city/reducer.js","components/App.jsx","store/weather/actions.js","store/weather/reducer.js","store/reducers.js","store/api/index.js","store/weather/sagas.js","store/city/sagas.js","store/sagas.js","serviceWorker.js","index.js","store/index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","SELECT_CITY","SELECT_CITY_SUCCESS","LabeledCheckbox","labelPlacement","value","label","dispatch","useDispatch","onChangeSelect","React","useCallback","event","type","city","FormControlLabel","control","Checkbox","onChange","card","minWidth","fontSize","CityCard","cityName","cityData","useSelector","state","weather","citiesData","find","shallowEqual","Card","CardContent","gutterBottom","temp","CardActions","FETCH_WEATHER","FETCH_WEATHER_SUCCESS","CITIES_NAME","initialState","selectedCities","grid","margin","textAlign","btn","background","borderRadius","border","height","padding","boxShadow","App","Grid","container","justify","cityNameList","map","index","key","item","xs","size","onClick","rootReducer","combineReducers","action","types","parsedData","reduce","data","acc","list","main","current","name","push","cities","xor","apiUrl","callServer","url","method","undefined","headers","axios","fetchWeather","fetchWeatherSaga","select","all","call","put","console","log","error","cancelled","takeEvery","weatherSagas","selectCity","selectCitySaga","payload","citySagas","rootSaga","Boolean","window","location","hostname","match","store","createLogger","sagaMiddleware","createSagaMiddleware","middlewares","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","compose","applyMiddleware","persistorConfig","storage","blacklist","reducer","persistReducer","createStore","run","persistStore","e","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ecd2529.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function ButtonAppBar() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Weather\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","const namespace = 'CITY';\n\nexport const SELECT_CITY = `${namespace}@SELECT_CITY`;\nexport const SELECT_CITY_SUCCESS = `${namespace}@SELECT_CITY_SUCCESS`;\n\n\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport {useDispatch} from \"react-redux\";\nimport {selectCity} from \"../store/city/actions\"\n\nexport default function LabeledCheckbox({labelPlacement = 'bottom', value, label = 'city'}) {\n    const dispatch = useDispatch();\n    const onChangeSelect = React.useCallback((event,value)=>{\n            dispatch(selectCity(value))\n    },[value]);\n    return (\n        <FormControlLabel\n            value={value}\n            control={<Checkbox color=\"primary\" onChange={(event)=>{onChangeSelect(event,value)}}/>}\n            label={label}\n            labelPlacement={labelPlacement}\n        />\n    );\n}\n","import {SELECT_CITY} from './types'\n\nexport function selectCity(payload) {\n    return {\n        type: SELECT_CITY,\n        city:payload\n    }\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LabeledCheckbox from \"./LabeledCheckbox\";\nimport {useSelector,shallowEqual} from \"react-redux\";\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 275,\n    },\n    title: {\n        fontSize: 14,\n    },\n});\n\nexport default function CityCard({cityName}) {\n    const classes = useStyles();\n    const cityData = useSelector(state=>state.weather.citiesData.find(city=>city.city===cityName),shallowEqual);\n\n    return (\n        <Card className={classes.card} variant=\"outlined\">\n            <CardContent>\n                <Typography className={classes.title} color=\"primary\" gutterBottom>\n                    City: {cityName}\n                </Typography>\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Temperature: {cityData?cityData.temp:\"--\"} °C\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <LabeledCheckbox label={\"select\"} labelPlacement={\"end\"} value={cityName}/>\n            </CardActions>\n        </Card>\n    );\n}\n","const namespace = 'WEATHER';\n\nexport const FETCH_WEATHER = `${namespace}@FETCH_WEATHER`;\nexport const FETCH_WEATHER_SUCCESS = `${namespace}@FETCH_WEATHER_SUCCESS`;\n\n\n","import * as types from './types'\nimport {xor} from 'lodash';\n\nexport const CITIES_NAME = [\"Miami\", \"Oakland\", \"Chicago\", \"Houston\", \"Dallas\", \"Austin\", \"Seattle\", \"Boston\", \"Detroit\", \"Memphis\"];\n\nconst initialState = {\n    selectedCities:[]\n};\n\nexport default function cities(state = initialState, action) {\n    switch (action.type) {\n        case types.SELECT_CITY_SUCCESS:\n            return {\n                ...state,\n                selectedCities:xor(state.selectedCities, [action.city])\n            };\n        default:\n            return state\n    }\n}\n","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport ButtonAppBar from \"./ButtonAppBar\";\nimport CityCard from \"./CityCard\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchWeather} from '../store/weather/actions';\nimport {CITIES_NAME as cityNameList}from '../store/city/reducer';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    grid: {\n        margin: theme.spacing(0.5),\n        textAlign: 'center',\n    },\n    btn:{\n        background: 'linear-gradient(30deg, #106BFB 20%, #90AFF0 70%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const handleSubmit = ()=>{\n        dispatch(fetchWeather());\n    };\n\n    return (\n        <>\n            <ButtonAppBar/>\n            <Grid className={classes.root} container spacing={1} justify=\"space-around\">\n                {cityNameList.map((cityName, index) => {\n                    return (\n                        <Grid key={index} className={classes.grid} item xs={2}>\n                            <CityCard cityName={cityName}/>\n                        </Grid>\n                    )\n                })}\n            </Grid>\n            <Grid container item xs={'auto'} justify={'center'} >\n                <Button classes={{root:classes.btn}} size=\"large\" variant=\"outlined\" color=\"primary\" onClick={handleSubmit}>Submit</Button>\n            </Grid>\n        </>\n    );\n}\n\nexport default App;\n","import {FETCH_WEATHER} from './types'\n\nexport function fetchWeather() {\n    return {\n        type: FETCH_WEATHER\n    }\n}","import * as types from './types'\nimport {reduce} from 'lodash';\nconst initialState = {\n    citiesData: []\n};\n\nexport default function weather(state = initialState, action) {\n    switch (action.type) {\n        case types.FETCH_WEATHER_SUCCESS:\n            const parsedData = reduce(action.data,(acc ,weather)=>{\n                const {temp} = weather.data.list[0].main;\n                const {name} = weather.data.city;\n                const current ={city:name,temp:temp};\n                acc.push(current);\n                return acc;\n            },[]);\n            return {\n                ...state,\n                citiesData: parsedData\n            };\n        default:\n            return state\n    }\n}\n","import weather from './weather/reducer'\nimport cities from './city/reducer'\nimport { combineReducers } from 'redux'\n\nconst appReducers = combineReducers({\n    weather,\n    cities\n});\n\nexport const rootReducer = appReducers;","import axios from \"axios\";\n\nconst API_KEY='e6c8e2e06ee03d15ed893112e5b97630';\nconst apiUrl = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}&q=`;\n\n\nexport const callServer = (url, method = 'get', data = undefined,headers=undefined) => {\n    return axios({\n        url: apiUrl+url+`,us&units=metric`,\n        method: method,\n        headers:headers,\n        data: data,\n    })\n};","import {call, cancelled, put, select, takeEvery,all} from 'redux-saga/effects'\nimport {FETCH_WEATHER, FETCH_WEATHER_SUCCESS,} from './types'\n\nimport {callServer} from '../api'\n\n// worker saga\nexport function* fetchWeather() {\n    const cities = yield select(state=>state.cities.selectedCities);\n\n    try {\n        const data=yield all(cities.map(city => call(callServer, city)));\n        yield put({type: FETCH_WEATHER_SUCCESS, data});\n        return data\n    } catch (error) {\n        console.log(error);\n        yield put({type: FETCH_WEATHER + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\n\nfunction* fetchWeatherSaga() {\n    yield takeEvery(FETCH_WEATHER, fetchWeather);\n}\n\nexport const weatherSagas = [\n    call(fetchWeatherSaga),\n];","import {\n    call,\n    put,\n    takeEvery,\n    cancelled,\n} from 'redux-saga/effects'\nimport {\n    SELECT_CITY,\n    SELECT_CITY_SUCCESS,\n} from './types'\n\n// worker saga\nexport function* selectCity({city}) {\n    try {\n        yield put({type: SELECT_CITY_SUCCESS, city});\n    } catch (error) {\n        console.log(error);\n        yield put({type: SELECT_CITY + '_ERROR', error})\n    } finally {\n        if (yield cancelled()) {\n            // ... put special cancellation handling code here\n        }\n    }\n}\nfunction* selectCitySaga(payload) {\n    yield takeEvery(SELECT_CITY, selectCity);\n}\n\n\n\nexport const citySagas = [\n    call(selectCitySaga),\n];","import { weatherSagas } from './weather/sagas';\nimport { citySagas } from './city/sagas';\nimport { all } from 'redux-saga/effects'\n\nexport default function* rootSaga() {\n    yield all([\n        ...weatherSagas,\n        ...citySagas\n\n    ])\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport configureStore from \"./store\";\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\n\nconst store = configureStore();\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\nimport { createLogger } from 'redux-logger'\nimport storage from 'redux-persist/lib/storage';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport { rootReducer } from './reducers'\nimport rootSaga from './sagas'\n\nexport default function configureStore() {\n    let store;\n\n    const logger = createLogger({});\n    const sagaMiddleware = createSagaMiddleware();\n\n    let middlewares = [\n        sagaMiddleware\n    ];\n\n    if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n        middlewares.push(logger) // DEV middlewares\n    }\n\n    const composeEnhancers =\n        typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({trace:true\n                // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n            })\n            : compose;\n\n    const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n    const persistorConfig = {\n        key: 'root',\n        storage,\n        blacklist: ['weather','cities']\n    };\n\n    const reducer = persistReducer(persistorConfig, rootReducer);\n\n    store = createStore(reducer, enhancer);\n\n    sagaMiddleware.run(rootSaga);\n\n    try {\n\n        // const persistor =\n            persistStore(store);\n        // persistor.purge();\n    } catch (e) {\n        console.log(e)\n    }\n\n    return store\n}\n"],"sourceRoot":""}